/// <reference types="node" />
declare class DlcOracle {
    /**
     * When converting a number to Hex, add a leading 0 if it does
     * not have an even number of characters
     * @param hexString The string to pad
     */
    private static padHexString(hexString);
    /**
     * Calculates the euclidean modulo over two BN bignums
     * @param num1 The dividend
     * @param num2 The divisor
     */
    private static euclideanMod(num1, num2);
    /**
     * Generates a proper byte array (Buffer) for a given numeric value
     * This because numeric values are expected to be wrapped in a 32 byte
     * message by LIT
     * @param value Number to encode
     */
    static generateNumericMessage(value: number): Buffer;
    /**
     * Derives the public key to a private key
     * @param privateKey The private key to derive the public key for
     */
    static publicKeyFromPrivateKey(privateKey: Buffer): Buffer;
    /**
     * Will return a new random private scalar to be used when signing a new message
     */
    static generateOneTimeSigningKey(): Buffer;
    /**
     * calculates the signature multipled by the generator
     * point, for an arbitrary message based on pubkey R and pubkey A.
     * Calculates P = pubR - h(msg, pubR)pubA.
     * This is used when building settlement transactions and determining the pubkey
     * to the oracle's possible signatures beforehand. Can be calculated with just
     * public keys, so by anyone.
     * @param oracleA The oracle's public key
     * @param oracleR The oracle's R-point (public key to the one-time signing key)
     * @param message The message to compute the signature pubkey for
     */
    static computeSignaturePubKey(oracleA: Buffer, oracleR: Buffer, message: Buffer): Buffer;
    /**
     * Computes the signature for an arbitrary message based on two private scalars:
     * The one-time signing key and the oracle's private key
     * @param privateKey The private key to sign with
     * @param oneTimeSigningKey The one-time signing key to sign with
     * @param message The message to sign
     */
    static computeSignature(privateKey: Buffer, oneTimeSigningKey: Buffer, message: Buffer): Buffer;
}
export { DlcOracle };
